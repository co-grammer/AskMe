@model StackOverflowProject.ViewModels.QuestionViewModel

@{
    ViewBag.Title = "View Question";
}

<div class="row">
    <div class="col-sm-12">
        <div class="form-group form-row">
            <div class="col-sm-10 offset-sm-2">
                <h3>@Model.QuestionName</h3>
                <div class="row">
                    <div class="col-sm-2">
                        <span class="badge badge-info">@Model.Category.CategoryName</span>
                    </div>
                    <div class="col-sm-2">
                        <span class="text-info">
                            @if (Convert.ToInt32(Session["CurrentUserID"]) == Model.User.UserID)
                            {
                                @:by you
                            }
                            else
                            {
                                @:by @Model.User.Name
                            }
                        </span>
                    </div>
                    <div class="col-sm-3">
                        <span class="text-success">by @Model.QuestionDateAndTime</span>
                    </div>
                    <div class="col-sm-2">
                        <span class="badge badge-pill badge-success col-2">
                            @Model.ViewsCount
                        </span>
                        Views
                    </div>
                </div>

                @if (Model.AnswersCount == 0)
                {
                    <p class="text-danger">No answers yet!</p>
                }
            </div>
        </div>

        @for (int i = 0; i < Model.Answers.Count; i++)
        {
            <div class="form-group form-row">
                <div class="col-sm-2">
                    <span class="badge badge-secondary col-2 votescount">
                        @Model.VotesCount
                    </span>
                    Votes

                    @*if current user is logged in and current user has not given the answer then print its up/down/neutral vote *@
                    @if (Session["CurrentUserName"] != null && Convert.ToInt32(Session["CurrentUserID"]) != Model.Answers[i].UserID)
                    {
                        if (Model.Answers[i].CurrentUserVoteType == 1)
                        {
                            <img src="~/Images/up-color.png" class="btnUpVote" style="cursor:pointer" width="24px" data-answerID="@Model.Answers[i].AnswerID" />
                            <img src="~/Images/down-empty.png" class="btnDownVote" style="cursor:pointer" width="24px" data-answerID="@Model.Answers[i].AnswerID" />
                        }
                        else if (Model.Answers[i].CurrentUserVoteType == -1)
                        {
                            <img src="~/Images/up-empty.png" class="btnUpVote" style="cursor:pointer" width="24px" data-answerID="@Model.Answers[i].AnswerID" />
                            <img src="~/Images/down-color.png" class="btnDownVote" style="cursor:pointer" width="24px" data-answerID="@Model.Answers[i].AnswerID" />
                        }
                        else
                        {
                            <img src="~/Images/up-empty.png" class="btnUpVote" style="cursor:pointer" width="24px" data-answerID="@Model.Answers[i].AnswerID" />
                            <img src="~/Images/down-empty.png" class="btnDownVote" style="cursor:pointer" width="24px" data-answerID="@Model.Answers[i].AnswerID" />
                        }
                    }
                </div>

                <div class="col-sm-7">
                    @if (Convert.ToInt32(Session["CurrentUserID"]) != Model.Answers[i].UserID)
                    {
                        @Model.Answers[i].AnswerText;
                    }
                    else
                    {
                        <p class="answer">@Model.Answers[i].AnswerText</p>
                        <button class="btn btn-info editbutton">Edit</button>

                        <form class="needs-validation hidden" novalidate="novalidate" action="/questions/editanswer" method="post">
                            <div class="form-group form-row">
                                <div class="col-sm-12">
                                    <label for="txtAnswer">Edit Your Answer</label>
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="AnmwerID" value="@Model.Answers[i].AnswerID" />
                                    <input type="hidden" name="QuestionID" value="@Model.Answers[i].QuestionID" />
                                    @*<div class="form-group col-sm-12">*@
                                    <textarea class="form-control" id="txtAnswer" placeholder="Enter Answer" name="AnswerText" required="required">@Model.Answers[i].AnswerText</textarea>
                                    <div class="valid-feedback">
                                        Looks good!
                                    </div>
                                    <div class="invalid-feedback">
                                        Please enter answer
                                    </div>
                                    @*</div>*@
                                </div>
                            </div>

                            <button type="submit" class="btn btn-primary">Update Answer</button>
                            <div class="text-danger">
                                @Html.ValidationSummary()
                            </div>
                        </form>
                    }
                </div>

                <div class="col-sm-1">
                    @if (Convert.ToInt32(Session["CurrentUserID"]) != Model.Answers[i].UserID)
                    {
                        @:by @Model.Answers[i].User.Name
                    }
                    else
                    {
                        @:by you
                    }
                </div>
                <div class="col-sm-2">
                    on @Model.Answers[i].AnswerDateAndTime
                </div>
            </div>
        }

        @if (Session["CurrentUserName"] != null)
        {
            <form class="needs-validation" novalidate="novalidate" action="/questions/addanswer" method="post">
                <div class="form-group form-row">
                    <div class="col-sm-12">
                        <h4>Add Your Answer</h4>
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="QuestionID" value="@Model.QuestionID" />
                        @*<div class="form-group col-sm-12">*@
                        <textarea class="form-control" id="txtAnswer" placeholder="Enter Answer" name="AnswerText" required="required"></textarea>
                        <div class="valid-feedback">
                            Looks good!
                        </div>
                        <div class="invalid-feedback">
                            Please enter answer
                        </div>
                        @*</div>*@
                    </div>
                </div>

                <button type="submit" class="btn btn-primary">Add Answer</button>
                <div class="text-danger">
                    @Html.ValidationSummary()
                </div>
            </form>
        }
    </div>
</div>

<script>
    $("a[href='/questions/view']").addClass("active");

    @* Up or down vote ajax call to a web api *@
    $(".btnUpVote").click(function () {
        var UpBtn = $(this);
        var DownBtn = UpBtn.parent().find(".btnDownVote");
        if (UpBtn.attr("src") == "/Images/up-empty.png")
        {
            var value;
            if (UpBtn.attr("src") == "/Images/up-empty.png" && DownBtn.attr("src") == "/Images/down-empty.png")
                value = 1;
            else
                value = 2;

            $.ajax({
                url: "/api/questions?answerid=" + UpBtn.attr("data-answerid") + "&value=" + value + "&UserID=@Session["CurrentUserID"]",
                type: "POST",
                success: function () {
                    UpBtn.parent().find(".votescount").text(parseInt(UpBtn.parent().find(".votescount").text()) + value);
                    UpBtn.attr("src", "/Images/up-color.png");
                    DownBtn.attr("src", "/Images/down-empty.png");
                }
            });
        }
    })

    $(".btnDownVote").click(function () {
        var DownBtn = $(this);
        var UpBtn = DownBtn.parent().find(".btnUpVote");
        if (DownBtn.attr("src") == "/Images/down-empty.png") {
            var value;
            if (DownBtn.attr("src") == "/Images/down-empty.png" && UpBtn.attr("src") == "/Images/up-empty.png")
                value = -1;
            else
                value = -2;

            $.ajax({
                url: "/api/questions?answerid=" + DownBtn.attr("data-answerid") + "&value=" + value + "&UserID=@Session["CurrentUserID"]",
                type: "POST",
                success: function () {
                    DownBtn.parent().find(".votescount").text(parseInt(DownBtn.parent().find(".votescount").text()) + value);
                    UpBtn.attr("src", "/Images/up-empty.png");
                    DownBtn.attr("src", "/Images/down-color.png");
                }
            });
        }
    })
    @* Up or down vote ajax call to a web api *@

    @*Edit answer*@
    $(".editbutton").click(function () {
        $(this).parent().find(".needs-validation").show();
        $(this).hide();
        $(".answer").hide();
    });
    @* Edit answer*@
</script>